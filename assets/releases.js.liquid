const Root = {
	delimiters: ["[[", "]]"],
	data() {
		return {
			// Main form & steps display status
			isShowForm: true,
			isShowFirst: false,
			isShowSecond: true,
			isShowThird: false,
			// Same data for shipping/billing info
			isShowBilling: false,
			// Selected product variant
			selectedVariant: "",
			// iti errors array
			itiErrors: ["Invalid number.", "Invalid country code.", "Too short.", "Too long.", "Invalid number."],
			// Customer info
			customerData: {
				email: "",
				firstName: "",
				lastName: "",
				shopifyCustomerId: "",
				shippingAddress: {
					firstName: "",
					lastName: "",
					countryCode: "",
					phone: "",
					state: "",
					city: "",
					address: "",
					zip: "",
				},
				billingAddress: {
					firstName: "",
					lastName: "",
					countryCode: "",
					phone: "",
					state: "",
					city: "",
					address: "",
					zip: "",
				},
			},
		}
	},
	mounted() {
		console.log("Releases form has been mounted!")
		this.$nextTick(function () {
			$("#form-release").validate({
				debug: true,
				// onsubmit: false,
				errorElement: "span",
				errorClass: "error-msg",
				validClass: "success-msg",
				success: function (label) {
					label.addClass("success-msg").text("Valid!")
				},
				ignore: "#same-data, #shipping__phone, #billing__phone",
				rules: {
					shipping__first_name: {
						required: true,
						minlength: 2,
						maxlength: 50,
					},
					shipping__last_name: {
						required: true,
						minlength: 2,
						maxlength: 50,
					},
					shipping__country: {
						required: true,
					},
					shipping__address: {
						required: true,
						minlength: 2,
						maxlength: 50,
					},
					shipping__city: {
						required: true,
						minlength: 2,
						maxlength: 50,
					},
					shipping__state: {
						required: true,
						minlength: 2,
						maxlength: 50,
					},
					shipping__postcode: {
						required: true,
						digits: true,
						min: 3,
						minlength: 3,
						maxlength: 6,
						pattern: /^[0-9]{5,6}(?:-[0-9]{4})?$/,
					},
					billing__first_name: {
						required: true,
						minlength: 2,
						maxlength: 50,
					},
					billing__last_name: {
						required: true,
						minlength: 2,
						maxlength: 50,
					},
					billing__country: {
						required: true,
					},
					billing__address: {
						required: true,
						minlength: 2,
						maxlength: 50,
					},
					billing__city: {
						required: true,
						minlength: 2,
						maxlength: 50,
					},
					billing__state: {
						required: true,
						minlength: 2,
						maxlength: 50,
					},
					billing__postcode: {
						required: true,
						digits: true,
						min: 3,
						minlength: 3,
						maxlength: 6,
						pattern: /^[0-9]{5,6}(?:-[0-9]{4})?$/,
					},
				},
				messages: {
					shipping__first_name: {
						required: "This input is required!",
						minlength: jQuery.validator.format("At least {0} characters!"),
						maxlength: jQuery.validator.format("No more than {0} characters!"),
					},
					shipping__last_name: {
						required: "This input is required!",
						minlength: jQuery.validator.format("At least {0} characters!"),
						maxlength: jQuery.validator.format("No more than {0} characters!"),
					},
					shipping__country: {
						required: "This select is required!",
					},
					shipping__address: {
						required: "This input is required!",
						minlength: jQuery.validator.format("At least {0} characters!"),
						maxlength: jQuery.validator.format("No more than {0} characters!"),
					},
					shipping__city: {
						required: "This input is required!",
						minlength: jQuery.validator.format("At least {0} characters!"),
						maxlength: jQuery.validator.format("No more than {0} characters!"),
					},
					shipping__state: {
						required: "This input is required!",
						minlength: jQuery.validator.format("At least {0} characters!"),
						maxlength: jQuery.validator.format("No more than {0} characters!"),
					},
					shipping__postcode: {
						required: "This input is required!",
						min: jQuery.validator.format("This input required more than {0} numbers!"),
						minlength: jQuery.validator.format("At least {0} numbers!"),
						maxlength: jQuery.validator.format("No more than {0} numbers!"),
						pattern: "This format is invalid!",
					},
					billing__first_name: {
						required: "This input is required!",
						minlength: jQuery.validator.format("At least {0} characters!"),
						maxlength: jQuery.validator.format("No more than {0} characters!"),
					},
					billing__last_name: {
						required: "This input is required!",
						minlength: jQuery.validator.format("At least {0} characters!"),
						maxlength: jQuery.validator.format("No more than {0} characters!"),
					},
					billing__country: {
						required: "This select is required!",
					},
					billing__address: {
						required: "This input is required!",
						minlength: jQuery.validator.format("At least {0} characters!"),
						maxlength: jQuery.validator.format("No more than {0} characters!"),
					},
					billing__city: {
						required: "This input is required!",
						minlength: jQuery.validator.format("At least {0} characters!"),
						maxlength: jQuery.validator.format("No more than {0} characters!"),
					},
					billing__state: {
						required: "This input is required!",
						minlength: jQuery.validator.format("At least {0} characters!"),
						maxlength: jQuery.validator.format("No more than {0} characters!"),
					},
					billing__postcode: {
						required: "This input is required!",
						min: jQuery.validator.format("This input required more than {0} numbers!"),
						minlength: jQuery.validator.format("At least {0} numbers!"),
						maxlength: jQuery.validator.format("No more than {0} numbers!"),
						pattern: "This format is invalid!",
					},
				},
				submitHandler: function (form) {
					// setupPayment()
					console.log("submit")
				},
				invalidHandler: function (event, validator) {
					// const isShippingPhoneValid = this.itiShippingPhoneValid()
					// const isBillingPhoneValid = this.itiBillingPhoneValid()
					const errors = validator.numberOfInvalids()
					// if (!isShippingPhoneValid) {
					// 	errors++
					// }
					// if (!isBillingPhoneValid) {
					// 	errors++
					// }
					if (errors) {
						console.error("Release form not valid! Total errors", errors)
						// alert(errors)
						// releases.utils.showToast(`Release form not valid!<br>Total errors ${errors}!`, "error")
					}
				},
			})

			$("input[name='shipping__phone']").intlTelInput({
				utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js",
				customContainer: "iti-shipping",
				nationalMode: false,
				autoPlaceholder: "aggressive",
				separateDialCode: true,
				initialCountry: "auto",
				geoIpLookup: this.geoIpLookup,
			})
			$(".iti-shipping").after('<p class="error-msg"></p>')
			$("input[name='shipping__phone']").on("countrychange", function () {
				if (!this.isShowBilling) {
					const countryData = $("input[name='shipping__phone']").intlTelInput("getSelectedCountryData")
					$("input[name='billing__phone']").intlTelInput("setCountry", countryData.iso2)
				}
			})

			$("input[name='billing__phone']").intlTelInput({
				utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js",
				customContainer: "iti-billing",
				nationalMode: false,
				autoPlaceholder: "aggressive",
				separateDialCode: true,
				initialCountry: "auto",
				geoIpLookup: this.geoIpLookup,
			})
			$(".iti-billing").after('<p class="error-msg"></p>')

			this.itiErrors[-99] = "This input is required"
		})
	},
	updated() {},
	computed: {},
	methods: {
		updateBillingData() {
			if (!this.isShowBilling) {
				Object.assign(this.customerData.billingAddress, this.customerData.shippingAddress)
				console.log("Billing Data has been updated!")
			}
		},
		async geoIpLookup(success, failure) {
			try {
				const response = await fetch("https://ipinfo.io/json", {
					method: "GET",
					headers: {
						"Content-Type": "application/json",
					},
				})
				if (!response.ok) {
					throw new Error("Fetching error", response)
				}
				resp = await response.json()
				const countryCode = resp.country ? resp.country : "US"
				success(countryCode)
				console.log("Your country info:", resp)
			} catch (error) {
				failure("US")
				console.error("Error geoIpLookup", error)
			}
		},
		itiShippingPhoneValid() {
			if ($("input[name='shipping__phone']").intlTelInput("isValidNumber")) {
				$(".iti-shipping").next(".error-msg").addClass("success-msg").text("Valid!")
				return true
			} else {
				let code = $("input[name='shipping__phone']").intlTelInput("getValidationError")
				console.log("Shipping Phone error code:", this.itiErrors[code])
				$(".iti-shipping").next(".error-msg").removeClass("success-msg").text(this.itiErrors[code])
				return false
			}
		},
		itiBillingPhoneValid() {
			if ($("input[name='billing__phone']").intlTelInput("isValidNumber")) {
				$(".iti-billing").next(".error-msg").addClass("success-msg").text("Valid!")
				return true
			} else {
				let code = $("input[name='billing__phone']").intlTelInput("getValidationError")
				console.log("Billing Phone error code:", this.itiErrors[code])
				$(".iti-billing").next(".error-msg").removeClass("success-msg").text(this.itiErrors[code])
				return false
			}
		},
	},
	watch: {
		"customerData.shippingAddress": {
			handler: function (newVal, oldVal) {
				this.updateBillingData()
			},
			deep: true,
		},
		"customerData.shippingAddress.phone": {
			handler: function (newVal, oldVal) {
				this.itiShippingPhoneValid()
			},
		},
		"customerData.billingAddress.phone": {
			handler: function (newVal, oldVal) {
				this.itiBillingPhoneValid()
			},
		},
	},
}

Vue.createApp(Root).mount("#root")
